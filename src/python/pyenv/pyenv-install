#!/bin/bash

: '
A Bash script for installing and configuring `pyenv`.

This script installs `pyenv` if it is not already installed, updates the shell configuration to make `pyenv`
available, and verifies the installation.

Usage:
    ./pyenv-install

Dependencies:
    This script requires `git` to clone the `pyenv` repository.
    Ensure that `curl`, `wget`, and necessary development tools are available on your system.
'


set -e  # Exit on error

# Function to print messages in a standardized format
# Arguments:
#   $1 - Message to print
print_message() {
  local message="$1"
  echo -e "\n\033[1;32m$message\033[0m"
}

# Function to handle errors by printing an error message and exiting the script
# Arguments:
#   $1 - The last command that caused the error
#   $2 - The exit code of the last command
handle_error() {
  local last_command="$1"
  local exit_code="$2"
  print_message "Error: Command '$last_command' exited with code $exit_code."
  exit "$exit_code"
}

# Trap errors and call handle_error function
trap 'handle_error "$BASH_COMMAND" $?' ERR

# Function to update package lists and install necessary dependencies
install_dependencies() {
  print_message "Updating package lists..."
  sudo apt-get update -y || exit 1

  print_message "Installing dependencies..."
  sudo apt-get install -y \
    build-essential \
    libssl-dev \
    zlib1g-dev \
    libbz2-dev \
    libreadline-dev \
    libsqlite3-dev \
    wget \
    curl \
    llvm \
    libncurses5-dev \
    libncursesw5-dev \
    xz-utils \
    tk-dev \
    libffi-dev \
    liblzma-dev \
    git || exit 1
}

# Function to install pyenv by cloning the repository if not already installed
install_pyenv() {
  print_message "Cloning pyenv repository..."
  if [ -d "$HOME/.pyenv" ]; then
    print_message "pyenv is already installed. Skipping clone."
  else
    git clone https://github.com/pyenv/pyenv.git ~/.pyenv || exit 1
  fi
}

# Function to configure the shell for pyenv by updating the shell profile
configure_shell() {
  print_message "Configuring shell for pyenv..."
  SHELL_CONFIG_FILE="$HOME/.bashrc"  # Change to ~/.zshrc for Zsh or other appropriate file

  # Append pyenv configuration to the shell profile if not already present
  if grep -q 'pyenv init' "$SHELL_CONFIG_FILE"; then
    print_message "pyenv is already configured in the shell profile. Skipping configuration."
  else
    {
      echo 'export PYENV_ROOT="$HOME/.pyenv"'
      echo '[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"'
      echo 'eval "$(pyenv init -)"'
    } >> "$SHELL_CONFIG_FILE" || exit 1
  fi

  # Reload shell configuration
  print_message "Reloading shell configuration..."
  source "$SHELL_CONFIG_FILE" || exit 1
}

# Function to verify the pyenv installation
verify_pyenv() {
  print_message "Verifying pyenv installation..."
  if command -v pyenv > /dev/null; then
    print_message "pyenv installed successfully!"
    pyenv --version
  else
    print_message "pyenv installation failed."
    exit 1
  fi
}

# Function to list available Python versions and install the specified or latest one
install_python_version() {
  local python_version="$1"
  
  if [ -z "$python_version" ]; then
    print_message "No Python version specified. Installing the latest version."
    AVAILABLE_VERSIONS=$(pyenv install --list | grep -oP '^\s*\K[0-9]+\.[0-9]+\.[0-9]+' | sort -V)
    python_version=$(echo "$AVAILABLE_VERSIONS" | tail -n 1)
  fi

  if [ -z "$python_version" ]; then
    print_message "No available Python versions found."
    exit 1
  fi

  print_message "Installing Python version $python_version..."
  pyenv install -s "$python_version" || exit 1
  pyenv global "$python_version" || exit 1

  # Verify Python version
  print_message "Verifying Python version..."
  python --version || exit 1
}

# Function to create a virtual environment using pyenv-virtualenv
create_virtualenv() {
  local project_name="$1"

  print_message "Creating virtual environment for project '$project_name'..."
  pyenv virtualenv "$(pyenv version-name)" "$project_name" || exit 1
  pyenv activate "$project_name" || exit 1

  print_message "Virtual environment '$project_name' created and activated."
}

# Main function to execute the script
main() {
  local project_name="${1:-$(basename "$PWD")}"
  local python_version="$2"

  install_dependencies
  install_pyenv
  configure_shell
  verify_pyenv
  install_python_version "$python_version"
  create_virtualenv "$project_name"
  
  print_message "Setup completed successfully with Python version $(pyenv version-name)!"
}

# Execute the main function
main "$@"

